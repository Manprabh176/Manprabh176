# -*- coding: utf-8 -*-
"""Business Development Research Tool (Enhanced Accuracy)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hDmh0UxKiCyoro4c5uZ_Ah2L3o0iqboy
"""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üì¶ 1) INSTALL DEPENDENCIES
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# We use 'rich' for beautifully formatted terminal output.
!pip install yfinance pandas numpy beautifulsoup4 requests matplotlib seaborn rich --quiet

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîß 2) IMPORT LIBRARIES
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import requests
from bs4 import BeautifulSoup
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
import warnings
import re

# Suppress warnings for a cleaner output
warnings.filterwarnings("ignore")
# Initialize rich console for beautiful printing
console = Console()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üõ†Ô∏è 3) THE ANALYZER CLASS
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class BusinessAnalyzer:
    """
    A tool to fetch, analyze, and visualize financial data for business development research.
    """
    def __init__(self, tickers, source='yahoo'):
        """
        Initializes the analyzer with a list of company tickers.

        Args:
            tickers (list): A list of stock tickers to analyze.
            source (str): The primary data source ('yahoo' or 'screener').
        """
        self.tickers = tickers
        self.source = source
        self.data = []
        self.df = pd.DataFrame()
        # Set Seaborn style for plots
        sns.set_theme(style="whitegrid")

    def _parse_screener_revenue_growth(self, soup):
        """
        Parses the quarterly results table from a Screener.in page to find YoY revenue growth.
        This is a major accuracy improvement, as this data isn't in the top summary.
        """
        try:
            sales_row = soup.find("th", text=re.compile(r"\s*Sales\s*")).parent
            # Get all number columns (td with a class 'text-right')
            sales_data = [td.text.replace(",", "") for td in sales_row.find_all("td")]

            # We need at least 5 quarters of data for YoY comparison (e.g., Mar23 vs Mar24)
            if len(sales_data) >= 5:
                # Last column is the most recent quarter, 5th to last is the same quarter last year
                latest_q_sales = float(sales_data[-1])
                prev_yr_q_sales = float(sales_data[-5])

                if prev_yr_q_sales > 0:
                    return (latest_q_sales - prev_yr_q_sales) / prev_yr_q_sales
        except (AttributeError, IndexError, ValueError) as e:
            # This can fail if the table structure is unexpected or data is missing
            console.print(f"      [grey50]Info: Could not parse revenue growth from quarterly table. Reason: {e}[/grey50]", highlight=False)
        return None # Return None if calculation is not possible

    def _get_screener_data(self, ticker):
        """Fetches key financial metrics from Screener.in for a given Indian stock ticker."""
        try:
            url = f"https://www.screener.in/company/{ticker}/"
            r = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
            r.raise_for_status()
            soup = BeautifulSoup(r.text, "html.parser")

            def parse_metric(name):
                el = soup.find("li", {"class": f"metric {name}"})
                if not el: return None
                num_span = el.find("span", {"class": "number"})
                if not num_span: return None
                return float(num_span.text.replace(",", ""))

            # Correctly identify revenue growth by parsing the quarterly table
            revenue_growth = self._parse_screener_revenue_growth(soup)

            return {
                "ticker": ticker,
                "currency": "INR", # Screener is for Indian stocks
                "market_cap": parse_metric("market-cap"), # This is already in Cr
                "pe": parse_metric("pe"),
                "roe": (parse_metric("roe") or 0) / 100,
                "de_ratio": parse_metric("debt-to-equity"),
                "op_margin": (parse_metric("operating-margin") or 0) / 100,
                "revenue_growth": revenue_growth,
            }
        except Exception as e:
            console.print(f"   [yellow]‚ö†Ô∏è Warning: Could not fetch data for {ticker} from Screener.in. Reason: {e}[/yellow]")
            return {"ticker": ticker}

    def _get_yahoo_data(self, ticker):
        """Fetches key financial metrics from Yahoo Finance for a given stock ticker."""
        try:
            stock = yf.Ticker(ticker)
            info = stock.info
            if not info or 'marketCap' not in info:
                raise ValueError("No data found, the ticker may be invalid or delisted.")

            # More accurate check for debtToEquity, handle cases where it's None
            de_ratio = info.get("debtToEquity")
            if de_ratio is not None:
                de_ratio /= 100 # yfinance provides D/E ratio as a percentage

            return {
                "ticker": ticker,
                "currency": info.get("currency", "N/A"),
                "market_cap": info.get("marketCap"),
                "pe": info.get("trailingPE"),
                "roe": info.get("returnOnEquity"),
                "de_ratio": de_ratio,
                "op_margin": info.get("operatingMargins"),
                "revenue_growth": info.get("revenueGrowth"),
            }
        except Exception as e:
            console.print(f"   [yellow]‚ö†Ô∏è Warning: Could not fetch data for {ticker} from Yahoo Finance. Reason: {e}[/yellow]")
            return {"ticker": ticker}

    def fetch_data(self):
        """Fetches data for all tickers using the selected source."""
        console.print(f"\n[bold cyan]üîç Fetching data for {len(self.tickers)} companies...[/bold cyan]")
        fetch_function = self._get_yahoo_data if self.source == 'yahoo' else self._get_screener_data

        with console.status("[bold green]Working on it...") as status:
            for t in self.tickers:
                console.print(f"   ‚Ä¢ Fetching [bold]{t}[/bold]...")
                self.data.append(fetch_function(t))
        return self

    def analyze_companies(self):
        """Analyzes fetched data by scoring and ranking companies."""
        console.print("[bold cyan]üìä Analyzing and scoring companies...[/bold cyan]")
        if not self.data:
            console.print("[bold red]Error: No data fetched. Cannot analyze.[/bold red]")
            return self

        self.df = pd.DataFrame(self.data).dropna(subset=["market_cap"]).reset_index(drop=True)
        if self.df.empty:
            console.print("[bold red]Error: No valid data available for analysis after cleaning.[/bold red]")
            return self

        # Robust Scoring using Rank-Percentage (more resistant to outliers)
        for col in ["roe", "op_margin", "revenue_growth"]:
            self.df[col + "_score"] = self.df[col].rank(pct=True).fillna(0.2) # Fill NaNs with a low score

        self.df['de_ratio_score'] = self.df['de_ratio'].rank(pct=True, ascending=False).fillna(0.2)

        # Composite scores with rationale
        # growth_score: Is the company expanding? (Revenue Growth + Profitability)
        self.df["growth_score"] = self.df["revenue_growth_score"] * 0.6 + self.df["roe_score"] * 0.4
        # quality_score: How efficiently is it run? (Profitability + Margins)
        self.df["quality_score"] = self.df["op_margin_score"] * 0.5 + self.df["roe_score"] * 0.5
        # stability_score: How risky is its financial structure? (Low Debt)
        self.df["stability_score"] = self.df['de_ratio_score']

        # Final Collaboration Score (Weighted average of the above)
        self.df["collab_score"] = self.df["growth_score"] * 0.4 + self.df["quality_score"] * 0.4 + self.df["stability_score"] * 0.2
        self.df = self.df.sort_values("collab_score", ascending=False).reset_index(drop=True)
        return self

    def generate_report(self):
        """Generates a text-based report with recommendations and insights."""
        if self.df.empty: return self

        top_currency = self.df.iloc[0].get('currency', 'N/A')
        # Dynamic Market Cap column based on currency
        if top_currency == 'INR':
            mkt_cap_header = "Mkt Cap (Cr INR)"
            mkt_cap_divisor = 1e7 # For Crores
        else:
            mkt_cap_header = f"Mkt Cap (M {top_currency})"
            mkt_cap_divisor = 1e6 # For Millions

        table = Table(title="Business Development Analysis Results", show_header=True, header_style="bold magenta")
        table.add_column("Rank", style="dim", width=4)
        table.add_column("Ticker", style="bold")
        table.add_column(mkt_cap_header, justify="right")
        table.add_column("P/E Ratio", justify="right")
        table.add_column("ROE (%)", justify="right")
        table.add_column("Op Margin (%)", justify="right")
        table.add_column("Rev Growth (%)", justify="right")
        table.add_column("Debt/Equity", justify="right")
        table.add_column("Collab Score", justify="right", style="bold green")

        for i, row in self.df.iterrows():
            mkt_cap_val = row['market_cap']
            # Screener data for market cap is already in Cr, so no division needed for INR
            divisor = mkt_cap_divisor if row.get('currency', 'N/A') != 'INR' else 1

            table.add_row(
                f"{i+1}",
                row["ticker"],
                f"{mkt_cap_val / divisor:,.2f}" if pd.notna(mkt_cap_val) else "N/A",
                f"{row['pe']:.2f}" if pd.notna(row['pe']) else "N/A",
                f"{row['roe']*100:.2f}" if pd.notna(row['roe']) else "N/A",
                f"{row['op_margin']*100:.2f}" if pd.notna(row['op_margin']) else "N/A",
                f"{row['revenue_growth']*100:.2f}" if pd.notna(row['revenue_growth']) else "N/A",
                f"{row['de_ratio']:.2f}" if pd.notna(row['de_ratio']) else "N/A",
                f"{row['collab_score']:.3f}",
            )
        console.print(table)

        strategy = self._generate_sales_strategy()
        collab_rec = self._recommend_collaboration()

        console.print(Panel(Text("\n".join(strategy), justify="left"), title="[bold green]üí° Sales Strategy[/bold green]", border_style="green"))
        console.print(Panel(Text(collab_rec, justify="left"), title="[bold green]üìå Collaboration Recommendation[/bold green]", border_style="green"))
        return self

    def _generate_sales_strategy(self):
        top = self.df.iloc[0]
        strat = []
        if top["growth_score"] > 0.7:
            strat.append(f"‚Ä¢ [bold]{top['ticker']}[/bold] is a high-growth leader. Emphasize innovation, scalability, and future value in your pitch.")
        else:
            strat.append(f"‚Ä¢ [bold]{top['ticker']}[/bold] is a steady performer. Focus on reliability, cost-efficiency, and clear return-on-investment (ROI).")

        avg_margin = self.df["op_margin"].mean()
        if pd.isna(avg_margin) or avg_margin < 0.15:
            strat.append("‚Ä¢ The market appears to have thin margins. Position your solution as a cost-saving or automation tool to boost their bottom line.")
        else:
            strat.append("‚Ä¢ Healthy margins in this sector suggest an appetite for quality. Highlight premium features, dedicated support, and long-term value.")
        return strat

    def _recommend_collaboration(self):
        top = self.df.iloc[0]
        s = top["collab_score"]
        name = top["ticker"]
        if s > 0.75:
            return f"‚úÖ [bold green]Strong Candidate:[/] {name} shows excellent alignment in growth, quality, and stability. A high-potential partner."
        elif s > 0.5:
            return f"‚ö†Ô∏è [bold yellow]Consider with Caution:[/] {name} has some strengths but also potential risks (check debt or margins). Proceed with due diligence."
        else:
            return f"‚ùå [bold red]Not an Ideal Match:[/] {name} does not currently align with key metrics for a strategic partnership. Re-evaluate in the future."

    def generate_visualizations(self):
        if self.df.empty:
            console.print("[bold red]Cannot generate visualizations: No data available.[/bold red]")
            return self

        console.print("[bold cyan]üé® Generating visualizations...[/bold cyan]")

        # --- Bar Chart for Metric Comparison ---
        df_plot = self.df.set_index("ticker")[["roe", "op_margin", "revenue_growth", "de_ratio"]].fillna(0)
        df_plot.plot(kind="bar", figsize=(14, 7), colormap="viridis", alpha=0.8)
        plt.title("Key Financial Metrics Comparison", fontsize=16)
        plt.ylabel("Value / Ratio")
        plt.xlabel("Company Ticker")
        plt.xticks(rotation=45, ha="right")
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        plt.tight_layout()
        plt.show()

        # --- Radar Chart for Top Company Profile ---
        top_company = self.df.iloc[0]
        labels = ['Growth', 'Quality', 'Stability']
        stats = [top_company['growth_score'], top_company['quality_score'], top_company['stability_score']]

        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
        stats = np.concatenate((stats,[stats[0]]))
        angles = np.concatenate((angles,[angles[0]]))

        fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
        ax.fill(angles, stats, color='deepskyblue', alpha=0.25)
        ax.plot(angles, stats, color='deepskyblue', linewidth=2)
        ax.set_yticklabels([])
        ax.set_thetagrids(np.degrees(angles[:-1]), labels)
        plt.title(f"Profile for {top_company['ticker']}", fontsize=14, y=1.1)
        plt.show()
        return self

    def generate_interpretations(self):
        if self.df.empty: return self
        top_company = self.df.iloc[0]
        name = top_company['ticker']
        currency = top_company.get('currency', 'N/A')

        mkt_cap_val = top_company['market_cap']
        mkt_cap_str = "N/A"
        if pd.notna(mkt_cap_val):
            if currency == 'INR':
                mkt_cap_str = f"{mkt_cap_val:,.2f} Cr" # Screener value is already in Cr
            else:
                mkt_cap_str = f"{mkt_cap_val / 1e6:,.2f} M {currency}"

        terms = {
            "Market Cap": (mkt_cap_str, f"This is the company's total market value. Think of it as the 'price tag' to buy the entire company."),
            "P/E Ratio": (f"{top_company['pe']:.2f}" if pd.notna(top_company['pe']) else "N/A", "Price-to-Earnings. Shows how much investors are willing to pay per dollar of profit. High P/E suggests high growth expectations."),
            "ROE (%)": (f"{top_company['roe']*100:.2f}%" if pd.notna(top_company['roe']) else "N/A", "Return on Equity. Measures how effectively the company uses investor money to generate profit. Higher is better."),
            "Operating Margin (%)": (f"{top_company['op_margin']*100:.2f}%" if pd.notna(top_company['op_margin']) else "N/A", "Profit from core business operations. It's a key indicator of operational efficiency."),
            "Revenue Growth (%)": (f"{top_company['revenue_growth']*100:.2f}%" if pd.notna(top_company['revenue_growth']) else "N/A", "Year-on-year sales increase. A direct measure of how fast the company is expanding."),
            "Debt-to-Equity": (f"{top_company['de_ratio']:.2f}" if pd.notna(top_company['de_ratio']) else "N/A", "Compares company's debt to its own funds. A ratio below 1.0 is often considered financially safe.")
        }

        table = Table(title=f"üìö Interpreting Key Metrics for {name}", show_header=True, header_style="bold blue")
        table.add_column("Metric", style="bold")
        table.add_column("Value", style="dim")
        table.add_column("What It Means in Simple Terms")
        for k, v in terms.items(): table.add_row(k, v[0], v[1])
        console.print(table)
        return self

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üöÄ 4) MAIN RUNNER FUNCTION
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run_bd_tool():
    """Main function to run the business development tool."""
    console.print(Panel("[bold yellow]üìä Business Development Research & Collaboration Tool üìä[/bold yellow]"))
    source_choice = console.input("Analyze [bold](G)[/bold]lobal stocks (Yahoo) or [bold](I)[/bold]ndian stocks (Screener)? [G/I]: ").strip().upper()
    source = 'screener' if source_choice == 'I' else 'yahoo'

    primary = console.input(f"Enter the main company ticker (e.g., {'RELIANCE' if source=='screener' else 'MSFT'}): ").strip().upper()
    peers_str = console.input(f"Enter competitor tickers, separated by commas (e.g., {'TCS,INFY' if source=='screener' else 'AAPL,GOOGL'}): ").strip().upper()

    peers = [p.strip() for p in peers_str.split(",") if p.strip()]
    tickers = [primary] + peers

    analyzer = BusinessAnalyzer(tickers, source=source)
    analyzer.fetch_data().analyze_companies()

    if not analyzer.df.empty:
        analyzer.generate_report().generate_visualizations().generate_interpretations()
        console.print("\n[bold green]‚úÖ Analysis Complete.[/bold green]")
    else:
        console.print("\n[bold red]‚ùå Analysis could not be completed due to lack of valid data.[/bold red]")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîÅ Execute the Tool
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    run_bd_tool()